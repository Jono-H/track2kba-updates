dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
library(tidyverse)
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
head(dataGroup,2)
str(dataGroup)
session_info()
dataGroup.plot <- st_as_sf(dataGroup, coords = c("Longitude", "Latitude"), crs=4326) # 4326 = geographic WGS84
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude)
)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
session_info()
library(sp)
session_info()
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
head(trips)
head(data.frame(trips),2)
str(trips)
session_info()
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
spRbind
spRbind()
splitSingleID()
splitSingleID
View(tripSplit)
View(tripSplit)
tripSplit
head(trips)
head(data.frame(trips),2)
str(trips)
source("R/tripSplit_maptools_removed.R")
source("R/tripSplit_maptools_removed.R")
View(tripSplit)
file.sources = list.files(path = "R/",
pattern=c("*.R|*.r"),
full.names = T)
sapply(file.sources,source,.GlobalEnv)
View(tripSplit)
View(tripSplit_maptools_removed)
trips <- tripSplit_maptools_removed(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
View(tripSplit_maptools_removed)
seq_len(length(unique(dataGroup$ID)))
source("R/tripSplit_maptools_removed_rbind.R")
trips <- tripSplit_maptools_removed_rbind(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
source("R/tripSplit_maptools_removed_rbind.R")
View(tripSplit_maptools_removed_rbind)
trips <- tripSplit_maptools_removed_rbind(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
head(trips)
head(data.frame(trips),2)
str(trips)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Source functions ----
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
file.sources = list.files(path = "R/",
pattern=c("*.R|*.r"),
full.names = T)
sapply(file.sources,source,.GlobalEnv)
load("data/boobies.rda")
## view the data
head(boobies,2)
library(devtools)
session_info()
## Format the key data fields to the standard used in track2KBA
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
library(tidyverse)
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
head(dataGroup,2)
## Check output
head(dataGroup)
str(dataGroup)
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude)
)
##
str(dataGroup)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
session_info()
library(sp)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
head(trips)
head(data.frame(trips),2)
str(trips)
dim(trips)
unique(trips$tripID)
length(unique(trips$tripID))
source("R/tripSplit_maptools_removed.R")
## Input is a 'data.frame' of tracking data and the central-place location.
## Output is a 'SpatialPointsDataFrame'.
trips_new <- tripSplit_maptools_removed(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
source("R/tripSplit_maptools_removed_rbind.R")
## Input is a 'data.frame' of tracking data and the central-place location.
## Output is a 'SpatialPointsDataFrame'.
trips_new <- tripSplit_maptools_removed_rbind(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
head(trips)
head(trips_new)
head(data.frame(trips),2)
head(data.frame(trips_new),2)
str(trips)
str(trips_new)
dim(trips)
dim(trips_new)
unique(trips$tripID)
unique(trips_new$tripID)
length(unique(trips$tripID))
length(unique(trips_new$tripID))
table(trips$Returns)
table(trips_new$Returns)
trips_new <- tripSplit_maptools_removed_rbind(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = F    # If true - points not associated with a trip will be removed
)
head(trips)
head(trips_new)
head(data.frame(trips),2)
head(data.frame(trips_new),2)
str(trips)
str(trips_new)
dim(trips)
dim(trips_new)
unique(trips$tripID)
unique(trips_new$tripID)
length(unique(trips$tripID))
length(unique(trips_new$tripID))
table(trips$Returns)
table(trips_new$Returns)
trips_new <- tripSplit_maptools_removed_rbind(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = T    # If true - points not associated with a trip will be removed
)
## review the new vs. old outputs
head(trips)
head(trips_new)
head(data.frame(trips),2)
head(data.frame(trips_new),2)
str(trips)
str(trips_new)
dim(trips)
dim(trips_new)
unique(trips$tripID)
unique(trips_new$tripID)
length(unique(trips$tripID))
length(unique(trips_new$tripID))
table(trips$Returns)
table(trips_new$Returns)
plot(st_geometry(st_as_sf(trips)), cex = 0.5, pch = 1) # ecologically sensible split
plot(trips)
plot(trips_new)
plot(trips, cex = 0.5, pch = 1)
plot(trips_new, cex = 0.5, pch = 1)
## Review loaded packages
library(devtools)
source()
sessionInfo()
session_info()
## trying https://stackoverflow.com/questions/8761857/identifying-dependencies-of-r-functions-and-scripts
## understand dependencies of functions
#install.packages("mvbutils")
library(mvbutils)
library(track2KBA)
library(adehabitatHR)
library(rgdal)
library(rgeos)
library(maptools)
library(sp)
ixWhere <- match(c("package:adehabitatHR","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
## what functions in track2KBA rely on adehabitatHR
ixWhere <- match(c("package:adehabitatHR","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
ixWhere <- match(c("package:sp","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
## what functions in track2KBA rely on rgdal
ixWhere <- match(c("package:rgdal","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
ixWhere <- match(c("package:rgeos","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
ixWhere <- match(c("package:rgeos","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
## what functions in track2KBA rely on maptools
ixWhere <- match(c("package:maptools","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
View(mapSite)
View(mapKDE)
View(repAssess)
ixWhere <- match(c("package:rgdal","package:track2KBA"), search())
fw <- foodweb(where = ixWhere, prune = ls("package:track2KBA"), descendents = T)
session_info()
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Source functions ----
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
file.sources = list.files(path = "R/",
pattern=c("*.R|*.r"),
full.names = T)
sapply(file.sources,source,.GlobalEnv)
"what is splitSingleID and where is it coming from?"
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## load the example data ----
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## load the data
load("data/boobies.rda")
## view the data
head(boobies,2)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Check what pacakges are loaded ----
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)
session_info()
"NOTE: You can see which packages are loaded by noting which have an * next to them
when using the session_info() function from devtools"
"Ensure that track2KBA is not loaded!"
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Run example track2KBA data from GitHub account / tutorial          ----------
## https://github.com/BirdLifeInternational/track2kba
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## formatFields() ----
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Format the key data fields to the standard used in track2KBA
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
"Load the next likely packages needed if an error occurs"
library(tidyverse)
## Try the function again
## Format the key data fields to the standard used in track2KBA
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
"Seems like a warning that will come up every 8 hours appears"
"No format supplied for Date and Time fields, a default format ('ymd_HMS')
attempted when combining the fields. If error produced, see help page
('?lubridate::parse_date_time') for information on date formats.
Warning messages:
1: Using an external vector in selections was deprecated in tidyselect 1.1.0.
ℹ Please use `all_of()` or `any_of()` instead.
# Was:
data %>% select(fieldID)
# Now:
data %>% select(all_of(fieldID))
See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This warning is displayed once every 8 hours.
Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.
2: Using an external vector in selections was deprecated in tidyselect 1.1.0.
ℹ Please use `all_of()` or `any_of()` instead.
# Was:
data %>% select(fieldLat)
# Now:
data %>% select(all_of(fieldLat))
See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This warning is displayed once every 8 hours.
Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.
3: Using an external vector in selections was deprecated in tidyselect 1.1.0.
ℹ Please use `all_of()` or `any_of()` instead.
# Was:
data %>% select(fieldLon)
# Now:
data %>% select(all_of(fieldLon))
See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This warning is displayed once every 8 hours.
Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. "
## Review output
head(dataGroup,2)
"dataGroup functions seems to be doing the right thing. Maybe that warning would
be suppressed ordinarily?"
## Check output
head(dataGroup)
str(dataGroup)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## view all data ----
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"From Jono's tutorial - hashing out for track2KBA testing"
# ## quick plot of all data for a quick overview
# dataGroup.plot <- st_as_sf(dataGroup, coords = c("Longitude", "Latitude"), crs=4326) # 4326 = geographic WGS84
# plot(st_geometry(dataGroup.plot),
#      cex = 0.5,
#      pch = 1)
#
# ## number of datapoints
# nrow(dataGroup)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Define colony ----
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## example relates to a seabird during the breeding season, when the species
## is known to be a central place forager, therefore, define the colony position
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude)
)
##
str(dataGroup)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## tripSplit() ----
# "If your data does not relate to a central place forager (CPF), OR
# a time when an animal may be exhibiting central place foraging behaviours,
# then skip this section and those relating to CPF data."
## Split tracking data into trips for Central Place Foragers via tripSplit() ----
# "This step is often very useful to help automate the removal of location points
# on land, or near the vicinty of a colony. We don't want these extra points to bias
# our interpretation of the data."
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Split the trips
"The user must define ecoogically sensible parameters to help automate the tripSplitting
process."
## Input is a 'data.frame' of tracking data and the central-place location.
## Output is a 'SpatialPointsDataFrame'.
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
"Error when running this without sp:
Error in SpatialPointsDataFrame(SpatialPoints(data.frame(dataGroup$Longitude,  :
could not find function "SpatialPointsDataFrame""
## Load required library
session_info()
library(sp)
"Run again with sp loaded"
## Input is a 'data.frame' of tracking data and the central-place location.
## Output is a 'SpatialPointsDataFrame'.
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
## review the outputs
head(trips)
head(data.frame(trips),2)
str(trips)
dim(trips)
unique(trips$tripID)
length(unique(trips$tripID))
"The above works, even though maptools is not loaded. But is this because maptools
is called directly within the function?"
"Try the analysis again after editing the function. Keeping the call to spRbind
within the function, but removing the direct link (i.e. maptools::spRbind) within
the function."
source("R/tripSplit_maptools_removed.R")
## Input is a 'data.frame' of tracking data and the central-place location.
## Output is a 'SpatialPointsDataFrame'.
trips_new <- tripSplit_maptools_removed(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = TRUE    # If true - points not associated with a trip will be removed
)
"Great:) That removal of the direct call to maptools::spRbind breaks the function.
NOW: What do we replace spRbind with?"
source("R/tripSplit_maptools_removed_rbind.R")
## Input is a 'data.frame' of tracking data and the central-place location.
## Output is a 'SpatialPointsDataFrame'.
trips_new <- tripSplit_maptools_removed_rbind(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # km - defines distance an animal must travel to count as trip started
returnBuff = 10,     # km - defines distance an animal must be from the colony to have returned and thus completed a trip
duration   = 1,      # hours - defines time an animal must have travelled away from the colony to count as a trip. helps remove glitches in data or very short trips that were likely not foraging trips.
rmNonTrip  = T    # If true - points not associated with a trip will be removed
)
"OKAY: So, in above function, we replaced spRbind with rbind. That seemed to do the trick :)"
"Now: what are the new outputs like? Will these work as intended with the other functions?"
## review the new vs. old outputs
head(trips)
head(trips_new)
head(data.frame(trips),2)
head(data.frame(trips_new),2)
str(trips)
str(trips_new)
dim(trips)
dim(trips_new)
unique(trips$tripID)
unique(trips_new$tripID)
length(unique(trips$tripID))
length(unique(trips_new$tripID))
table(trips$Returns)
table(trips_new$Returns)
"Note: if you specify rmNonTrip = F, it still seems to work fine."
"CONCLUSION: tripSplit seems to be simple fix to remove dependency on maptools.
just needed to change spRbind to rbind"
## compare the different scenarios in plots
plot(trips, cex = 0.5, pch = 1)
plot(trips_new, cex = 0.5, pch = 1)
session_info()
